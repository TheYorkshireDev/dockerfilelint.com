# Build using lightweight docker in docker image
image: theyorkshiredev/docker-slim:latest

# Since we building docker images within a docker container we need the
# docker in docker service.
services:
  - docker:dind

stages:
  - build
  - test
  - deploy

# Some variables used within the pipeline
before_script:
  - export CI_COMMIT_SHA_SHORT=${CI_COMMIT_SHA:0:8}
  - export COMMIT_RELEASE_IMAGE=$( echo $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA_SHORT | tr '[:upper:]' '[:lower:]' )
  - export COMMIT_DEVELOPMENT_IMAGE=$( echo $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA_SHORT | tr '[:upper:]' '[:lower:]' )-dev
  - export RELEASE_VERSION=RC-$( echo $CI_COMMIT_REF_NAME | sed -n 's/.*release-\(.*\)/\1/p' )

# Group Docker login commands
.log_into_docker : &log_into_docker |
  docker info
  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Build dockerfilelint.com with the development profile using make
build_host_dev:
  image: node:9.3.0
  stage: build
  script:
    - "[ ! -d dist ] && echo 'dist directory not found which is expected'"
    - npm install -g grunt-cli babel
    - make deps
    - make build
    - "[ -d dist ] && echo 'dist directory found which is expected after make'"

# Build dockerfilelint.com with the release profile using make
build_host_release:
  image: node:9.3.0
  stage: build
  script:
    - "[ ! -d dist ] && echo 'dist directory not found which is expected'"
    - npm install -g grunt-cli babel
    - make deps
    - make release BUILDVERSION=$CI_COMMIT_SHA_SHORT RELEASEVERSION=$RELEASE_VERSION GATOKEN=$GA_TOKEN
    - "[ -d dist ] && echo 'dist directory found which is expected after make'"

# Build dockerfilelint.com with the development profile using docker
build_development_image:
  stage: build
  script:
    - *log_into_docker
    - docker build --pull -t $COMMIT_DEVELOPMENT_IMAGE .
    - docker push $COMMIT_DEVELOPMENT_IMAGE

# Build dockerfilelint.com with the release profile using docker
build_release_image:
  stage: build
  script:
    - *log_into_docker
    - docker build --pull --file Dockerfile.release --build-arg BUILD_VERSION=$CI_COMMIT_SHA_SHORT -t $COMMIT_RELEASE_IMAGE .
    - docker push $COMMIT_RELEASE_IMAGE
  except:
    - develop
    - /^.*release-.*$/
    - master
    - tags

build_alpha_image:
  stage: build
  script:
    - *log_into_docker
    - docker build --pull --file Dockerfile.release --build-arg BUILD_VERSION=$CI_COMMIT_SHA_SHORT --build-arg RELEASE_VERSION=develop-branch --build-arg ENVIRONMENT=alpha --build-arg GA_TOKEN=$ALPHA_GA_TOKEN -t $COMMIT_RELEASE_IMAGE .
    - docker push $COMMIT_RELEASE_IMAGE
  only:
    - develop

build_beta_image:
  stage: build
  script:
    - *log_into_docker
    - docker build --pull --file Dockerfile.release --build-arg BUILD_VERSION=$CI_COMMIT_SHA_SHORT --build-arg RELEASE_VERSION=$RELEASE_VERSION --build-arg ENVIRONMENT=beta --build-arg GA_TOKEN=$BETA_GA_TOKEN -t $COMMIT_RELEASE_IMAGE .
    - docker push $COMMIT_RELEASE_IMAGE
  only:
    - /^.*release-.*$/

build_prod_image:
  stage: build
  script:
    - *log_into_docker
    - docker build --pull --file Dockerfile.release --build-arg BUILD_VERSION=$CI_COMMIT_SHA_SHORT --build-arg RELEASE_VERSION=$CI_COMMIT_TAG --build-arg ENVIRONMENT=prod --build-arg GA_TOKEN=$PROD_GA_TOKEN -t $COMMIT_RELEASE_IMAGE .
    - docker push $COMMIT_RELEASE_IMAGE
  only:
    - tags
    - master

# Test our docker image and verify that the container runs and anything supposed to be installed is
test_development_image:
  stage: test
  script:
    - apk add --no-cache curl && rm -rf /var/cache/apk/*
    - *log_into_docker
    - docker pull $COMMIT_DEVELOPMENT_IMAGE
    - docker run -i $COMMIT_DEVELOPMENT_IMAGE /bin/sh -c 'grunt -V'
    - docker run -i $COMMIT_DEVELOPMENT_IMAGE /bin/sh -c 'node -v'
    - docker run -i $COMMIT_DEVELOPMENT_IMAGE /bin/sh -c 'npm -v'
    - docker run -id -p 5000:5000 $COMMIT_DEVELOPMENT_IMAGE
    # Verify the container is up
    - "sleep 30 && docker ps"
    - curl 172.17.0.3:5000

# Test our docker image and verify that the container runs and anything supposed to be installed is
test_release_image:
  stage: test
  script:
    - apk add --no-cache curl && rm -rf /var/cache/apk/*
    - *log_into_docker
    - docker pull $COMMIT_RELEASE_IMAGE
    - docker run -i $COMMIT_RELEASE_IMAGE /bin/sh -c 'nginx -V'
    - docker run -id -p 80:80 $COMMIT_RELEASE_IMAGE
    # Verify the container is up
    - "sleep 30 && docker ps"
    - curl 172.17.0.3:80

# Lint our Dockerfile
lint_development_dockerfile:
  image: theyorkshiredev/dockerfile-linter:latest
  stage: test
  script:
    - dockerfilelint Dockerfile

# Lint our Dockerfile
lint_release_dockerfile:
  image: theyorkshiredev/dockerfile-linter:latest
  stage: test
  script:
    - dockerfilelint Dockerfile.release

# deploy_alpha:
#   stage: deploy
#   image: cdrx/rancher-gitlab-deploy
#   script:
#     - upgrade --environment Dockerfilelint --stack Dockerfilelint --service Alpha --new-image $COMMIT_RELEASE_IMAGE --finish-upgrade
#   only:
#     - develop

# deploy_beta:
#   stage: deploy
#   image: cdrx/rancher-gitlab-deploy
#   script:
#     - upgrade --environment Dockerfilelint --stack Dockerfilelint --service Beta --new-image $COMMIT_RELEASE_IMAGE --finish-upgrade
#   only:
#     - /^.*release-.*$/

compile_prod:
  stage: deploy
  image: node:9.3.0
  script:
    - "[ ! -d dist ] && echo 'dist directory not found which is expected'"
    - npm install -g grunt-cli babel
    - make deps
    - make release BUILDVERSION=$CI_COMMIT_SHA_SHORT RELEASEVERSION=$CI_COMMIT_TAG ENVIRONMENT=prod GATOKEN=$PROD_GA_TOKEN
    - "[ -d dist ] && echo 'dist directory found which is expected after make'"
  artifiacts:
    - dist/
  only:
    - tags

deploy_prod:
  stage: deploy
  image: cdrx/rancher-gitlab-deploy
  script:
    - upgrade --environment Dockerfilelint --stack Dockerfilelint --service www --new-image $COMMIT_RELEASE_IMAGE --finish-upgrade
  when: manual
  only:
    - tags
